/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[2,9],$V2=[1,10],$V3=[1,11],$V4=[5,8,9,10],$V5=[1,33],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[2,43],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,43],$Vg=[1,53],$Vh=[1,54],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[1,58],$Vm=[1,61],$Vn=[1,66],$Vo=[1,67],$Vp=[2,21],$Vq=[2,8,9,10,16,26,27,28,29,30],$Vr=[25,34],$Vs=[2,8,9,10,13,16,22,26,27,28,29,30,51,52,60,61,62,66,68,69,70,71,84,85,86,87,88],$Vt=[1,92],$Vu=[1,94],$Vv=[1,85],$Vw=[1,86],$Vx=[1,87],$Vy=[1,88],$Vz=[1,89],$VA=[1,90],$VB=[1,91],$VC=[2,30],$VD=[1,101],$VE=[1,100],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[24,25,34,71,72,73,74,75,76,77,78,79,80,81,82,83],$VR=[1,115],$VS=[2,32],$VT=[1,121],$VU=[24,25,34,71,72,75,76,77,78,79,80,81,82,83],$VV=[24,25,34,75,76,77],$VW=[24,25,34,75,76,77,78,79],$VX=[24,25,34,75,76,77,78,79,80,81,82,83],$VY=[2,110],$VZ=[1,145],$V_=[1,160],$V$=[1,166],$V01=[2,60],$V11=[1,157],$V21=[1,158],$V31=[1,165],$V41=[1,167],$V51=[1,161],$V61=[1,162],$V71=[1,163],$V81=[1,164],$V91=[2,8,13,16,26,27,28,29,30,51,52,60,61,62,66,68,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_PLANTILLAS":4,"EOF":5,"PLANTILLA":6,"LISTA_PLANTILLAS_P":7,"tk_comentario":8,"tk_multi_coment":9,"tk_public":10,"TIPO_PLANTILA":11,"tk_class":12,"tk_identificador":13,"tk_llave_izq":14,"INSTRUCCIONES_CLASE":15,"tk_llave_der":16,"tk_interface":17,"LISTA_FUNCIONES":18,"FUNCION":19,"LISTA_FUNCIONES_P":20,"TIPO":21,"tk_parentesis_izq":22,"LISTA_PARAMETROS":23,"tk_parentesis_der":24,"tk_punto_coma":25,"tk_string":26,"tk_int":27,"tk_char":28,"tk_double":29,"tk_boolean":30,"tk_void":31,"PARAMETRO":32,"LISTA_PARAMETROS_P":33,"tk_coma":34,"TIPO_DATO":35,"DECLARACION_METODO":36,"DECLARACION_VARIABLES":37,"METODO":38,"tk_static":39,"tk_main":40,"tk_corchete_izq":41,"tk_corchete_der":42,"INSTRUCCIONES":43,"IF":44,"FOR":45,"WHILE":46,"DO":47,"IMPRIMIR":48,"ASIGNACION":49,"LLAMAR_FUNCION":50,"tk_break":51,"tk_continue":52,"RETURN":53,"DECLARACION_VARIABLES_P":54,"DECLARACION_VARIABLES_SP":55,"tk_igual":56,"EXPRESION":57,"tk_incremento":58,"tk_decremento":59,"tk_imprimir":60,"tk_return":61,"tk_if":62,"ELSE":63,"tk_else":64,"ELSE_IF":65,"tk_for":66,"INCREMENTO":67,"tk_while":68,"tk_do":69,"tk_not":70,"tk_menos":71,"tk_mas":72,"tk_multiplicacion":73,"tk_division":74,"tk_xor":75,"tk_and":76,"tk_or":77,"tk_doble_igual":78,"tk_diferente_de":79,"tk_menor_igual":80,"tk_mayor_igual":81,"tk_menor":82,"tk_mayor":83,"tk_numero":84,"tk_true":85,"tk_false":86,"tk_cadena":87,"tk_caracter":88,"LISTA_EXPRESIONES":89,"LISTA_EXPRESIONES_P":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_comentario",9:"tk_multi_coment",10:"tk_public",12:"tk_class",13:"tk_identificador",14:"tk_llave_izq",16:"tk_llave_der",17:"tk_interface",22:"tk_parentesis_izq",24:"tk_parentesis_der",25:"tk_punto_coma",26:"tk_string",27:"tk_int",28:"tk_char",29:"tk_double",30:"tk_boolean",31:"tk_void",34:"tk_coma",39:"tk_static",40:"tk_main",41:"tk_corchete_izq",42:"tk_corchete_der",51:"tk_break",52:"tk_continue",56:"tk_igual",58:"tk_incremento",59:"tk_decremento",60:"tk_imprimir",61:"tk_return",62:"tk_if",64:"tk_else",66:"tk_for",68:"tk_while",69:"tk_do",70:"tk_not",71:"tk_menos",72:"tk_mas",73:"tk_multiplicacion",74:"tk_division",75:"tk_xor",76:"tk_and",77:"tk_or",78:"tk_doble_igual",79:"tk_diferente_de",80:"tk_menor_igual",81:"tk_mayor_igual",82:"tk_menor",83:"tk_mayor",84:"tk_numero",85:"tk_true",86:"tk_false",87:"tk_cadena",88:"tk_caracter"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,0],[7,2],[7,2],[7,2],[7,0],[6,2],[11,5],[11,5],[11,2],[18,2],[18,2],[18,2],[18,0],[20,2],[20,2],[20,2],[20,0],[19,7],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[23,2],[23,0],[33,3],[33,0],[32,2],[35,1],[35,1],[35,1],[35,1],[35,1],[15,2],[15,2],[15,2],[15,2],[15,0],[36,2],[38,12],[38,8],[38,2],[43,2],[43,2],[43,2],[43,2],[43,2],[43,2],[43,2],[43,3],[43,2],[43,2],[43,1],[43,2],[43,0],[37,3],[37,2],[54,3],[54,1],[55,3],[55,1],[49,4],[49,3],[49,3],[48,5],[53,3],[53,2],[44,8],[63,2],[63,0],[65,1],[65,3],[45,11],[46,7],[47,9],[67,1],[67,1],[57,2],[57,2],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,3],[50,4],[89,2],[89,0],[90,3],[90,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
            let nodoRaiz = new Nodo("INICIO", "INICIO");
            nodoRaiz.agregarHijo($$[$0-1].nodo);


            return {
                listaTokens: listaTokens, 
                listaErrores: listaErrores, 
                ast: nodoRaiz,
                traduccion: $$[$0-1].traduccion
                };

            
        
break;
case 2:
  this.$ = new Nodo("LISTA_PLANT", "LISTA_PLANT 1");
                                                    this.$.agregarHijo($$[$0-1].nodo);

                                                    traduccion = `${$$[$0-1].traduccion}\n`;
                                                    if ($$[$0]) {
                                                        this.$.agregarHijo($$[$0].nodo);
                                                        traduccion += `${$$[$0].traduccion}`;
                                                    }
                                                    this.$ = {nodo: this.$, traduccion: traduccion}
                                                 
break;
case 3: case 4: case 7: case 8:

                        this.$ = new Nodo("LISTA_PLANT","LISTA_PLANT");

                        traduccion = `${$$[$0-1]}\n`;
                        if ($$[$0]) {
                            this.$.agregarHijo($$[$0].nodo);
                            traduccion += `${$$[$0].traduccion}\n`;
                        }
                        this.$ = {nodo: this.$, traduccion: traduccion};

                    
break;
case 6:
  this.$ = new Nodo("LISTA_PLANT", "LISTA_PLANT 2");
                                                    this.$.agregarHijo($$[$0-1].nodo);

                                                    traduccion = `${$$[$0-1].traduccion}\n`;
                                                    if ($$[$0]) {
                                                        this.$.agregarHijo($$[$0].nodo);
                                                        traduccion += `${$$[$0].traduccion}`;
                                                    }
                                                    this.$ = {nodo: this.$, traduccion: traduccion}


                                                 
break;
case 10:

        this.$ = new Nodo("PLANTILLA", "PLANTILLA");
        this.$.agregarHijo(new Nodo("public", $$[$0-1]));
        this.$.agregarHijo($$[$0].nodo);

        this.$ = {nodo: this.$, traduccion: $$[$0].traduccion};
        
        
    
break;
case 11:

                    this.$ = new Nodo("CLASE", "CLASE");
                    this.$.agregarHijo(new Nodo("class", $$[$0-4]));
                    this.$.agregarHijo(new Nodo("id", $$[$0-3]));
                    
                    


                    traduccion = "class " + $$[$0-3] + "{ \n";
                    if ($$[$0-1]) {
                        this.$.agregarHijo($$[$0-1].nodo);
                        $$[$0-1].traduccion.split("\n").forEach(linea => {
                            traduccion += "    " + linea + "\n";
                        });
                    }
                    


                    traduccion += "\n}\n";
                    this.$ = {nodo: this.$, traduccion: traduccion};

                    

                
break;
case 12:

                    this.$ = new Nodo("INTERFAZ", "INTERFACE");
                    this.$.agregarHijo(new Nodo("interface", $$[$0-4]));
                    this.$.agregarHijo(new Nodo("id", $$[$0-3]));


                    traduccion = `class ${$$[$0-3]} { \n`;
                    if ($$[$0-1]) { 
                        this.$.agregarHijo($$[$0-1].nodo);
                        traduccion += `${$$[$0-1].traduccion}`;
                    }
                    traduccion += `}\n`;
                    
                    this.$ = {nodo: this.$, traduccion: traduccion};

                
break;
case 13:
   
                    console.log("ERROR SINTACTICO 1 -> LINEA: " + this._$.first_line);
                    this.$ = {nodo: new Nodo("",""), traduccion: ""}; 
                    listaErrores.push(new Token("ERROR SINTACTICO", yytext, this._$.first_line, this._$.first_column)); 
                
break;
case 14:
 this.$ = new Nodo("LISTA_FUNC", "LISTA_FUNC");
                                             this.$.agregarHijo($$[$0-1].nodo);
                                            
                                             traduccion = `${$$[$0-1].traduccion}`;
                                             if ($$[$0]) {
                                                   this.$.agregarHijo($$[$0].nodo);
                                                   traduccion += `${$$[$0].traduccion}`;
                                             }
                                             this.$ = {nodo: this.$, traduccion: traduccion}

                                           
break;
case 15: case 16: case 19: case 20:

                        this.$ = new Nodo("LISTA_FUNC","LISTA_FUNC");

                        traduccion = `   ${$$[$0-1]}\n`;
                        if ($$[$0]) {
                            this.$.agregarHijo($$[$0].nodo);
                            traduccion += `${$$[$0].traduccion}\n`;
                        }
                        this.$ = {nodo: this.$, traduccion: traduccion};

                    
break;
case 18:
 this.$ = new Nodo("LISTA_FUNC", "LISTA_FUNC");
                                               this.$.agregarHijo($$[$0-1].nodo);


                                               traduccion = `${$$[$0-1].traduccion}`;
                                               if ($$[$0]) {
                                                   this.$.agregarHijo($$[$0].nodo);
                                                   traduccion += `${$$[$0].traduccion}`;
                                               }
                                               this.$ = {nodo: this.$, traduccion: traduccion}
                                             
break;
case 22:

        this.$ = new Nodo("FUNCION", "FUNCION");
        this.$.agregarHijo(new Nodo("public", $$[$0-6]));
        this.$.agregarHijo(new Nodo("TIPO", $$[$0-5]));
        this.$.agregarHijo(new Nodo("id", $$[$0-4]));
        this.$.agregarHijo($$[$0-2].nodo);


        traduccion = `   function ${$$[$0-4]} (`;
        if($$[$0-2]){
            traduccion += `${$$[$0-2].traduccion}`
        }
        traduccion += `){} \n\n`;
        this.$ =  {nodo: this.$, traduccion: traduccion}
    
break;
case 23: case 24: case 25: case 26: case 27: case 28: case 34: case 35: case 36: case 37: case 38:
this.$ = $$[$0]
break;
case 29:
 this.$ = new Nodo("LISTA_PARAMS", "LISTA_PARAMS 1");
                                                 this.$.agregarHijo($$[$0-1].nodo);

                                                 traduccion = `${$$[$0-1].traduccion}`;
                                                 if($$[$0]) {
                                                    this.$.agregarHijo($$[$0].nodo);
                                                    traduccion += `${$$[$0].traduccion}`;
                                                 }
                                                 this.$ =  {nodo: this.$, traduccion: traduccion};
                                               
break;
case 31:
 this.$ = new Nodo("LISTA_PARAMS", "LISTA_PARAMS 2");
                                                           this.$.agregarHijo($$[$0-1].nodo);

                                                           traduccion = `,${$$[$0-1].traduccion}`;
                                                           if($$[$0]) {
                                                               this.$.agregarHijo($$[$0].nodo);
                                                               traduccion += `${$$[$0].traduccion}`;
                                                           }
                                                           this.$ =  {nodo: this.$, traduccion: traduccion}
                                                         
break;
case 33:
 this.$ = new Nodo("PARAMETRO", "PARAMETRO");
                                        this.$.agregarHijo(new Nodo("TIPO DATO", $$[$0-1]));
                                        this.$.agregarHijo(new Nodo("ID", $$[$0]));

                                        traduccion = `${$$[$0]}`;
                                        this.$ =  {nodo: this.$, traduccion: traduccion};
                                      
break;
case 39:
 this.$ = new Nodo("INSTR_CLASS", "INSTR_CLASS");
                                                              this.$.agregarHijo($$[$0-1].nodo);

                                                              traduccion = $$[$0-1].traduccion;
                                                              if ($$[$0]) {
                                                                  this.$.agregarHijo($$[$0].nodo);
                                                                  traduccion += $$[$0].traduccion;
                                                              }
                                                              this.$ = {nodo: this.$, traduccion: traduccion};
                                                              
                                                            
break;
case 40:
 this.$ = new Nodo("INSTR_CLASS", "INSTR_CLASS");
                                                                  this.$.agregarHijo($$[$0-1].nodo);

                                                                 traduccion = $$[$0-1].traduccion;
                                                                 
                                                                 if ($$[$0]) {
                                                                    this.$.agregarHijo($$[$0].nodo);
                                                                    traduccion += $$[$0].traduccion;
                                                                    
                                                                 }
                                                                this.$ = {nodo: this.$, traduccion: traduccion};
                                                              

                                                                
break;
case 41: case 42:

                            this.$ = new Nodo("INSTR_CLASS","INSTR_CLASS");

                            traduccion = `\n${$$[$0-1]}\n`;
                            if ($$[$0]) {
                                this.$.agregarHijo($$[$0].nodo);
                                traduccion += `${$$[$0].traduccion}`;
                            }
                            this.$ = {nodo: this.$, traduccion: traduccion};

                    
break;
case 44:
 this.$ = new Nodo("DECL_METODO", "DECL_METODO");
                                       this.$.agregarHijo(new Nodo("public", $$[$0-1]));
                                       this.$.agregarHijo($$[$0].nodo);

                                       this.$ = {nodo: this.$, traduccion: $$[$0].traduccion};
                                     
break;
case 45:

            this.$ = new Nodo("MAIN", "MAIN");
            this.$.agregarHijo(new Nodo("static", $$[$0-11]));
            this.$.agregarHijo(new Nodo("void", $$[$0-10]));
            this.$.agregarHijo(new Nodo("main", $$[$0-9]));
            this.$.agregarHijo(new Nodo("String", $$[$0-7]));
            this.$.agregarHijo(new Nodo("ID", $$[$0-4]));

            traduccion = `function main (args) {\n`; 
            if($$[$0-1]) {
                this.$.agregarHijo($$[$0-1].nodo);
                $$[$0-1].traduccion.split("\n").forEach(linea => {
                    if (linea != ""){
                        traduccion += "   " + linea + "\n";
                    }
                });
            }
            traduccion += `}\n\n`
            this.$ = {nodo: this.$, traduccion: traduccion}

        
break;
case 46:

            this.$ = new Nodo("METODO", "METODO");
            this.$.agregarHijo(new Nodo("TIPO",$$[$0-7]));
            this.$.agregarHijo(new Nodo("ID", $$[$0-6]));

            traduccion = `function ${$$[$0-6]} (`; 
            if ($$[$0-4]) {
                this.$.agregarHijo($$[$0-4].nodo);
                traduccion += $$[$0-4].traduccion;
            }
            traduccion += `) {\n`;
            if($$[$0-1]) {
                this.$.agregarHijo($$[$0-1].nodo);
                $$[$0-1].traduccion.split("\n").forEach(linea => {
                    if (linea != ""){
                        traduccion += "   " + linea + "\n";
                    }
                });
            }
            traduccion += `}\n\n`
            this.$ = {nodo: this.$, traduccion: traduccion}

        
break;
case 47:
   console.log("ERROR SINTACTICO 2-> LINEA: " + this._$.first_line);
            this.$ = {nodo: new Nodo("",""), traduccion: ""}; 
            listaErrores.push(new Token("ERROR SINTACTICO", yytext, this._$.first_line, this._$.first_column)); 
        
break;
case 48:
 this.$ = new Nodo("INSTRUC", "INSTRUC");
                                                     this.$.agregarHijo($$[$0-1].nodo);
                                                     

                                                     traduccion = $$[$0-1].traduccion;
                                                                 
                                                     if ($$[$0]) {
                                                        this.$.agregarHijo($$[$0].nodo);
                                                        traduccion += $$[$0].traduccion;
                                                                    
                                                     }
                                                     this.$ = {nodo: this.$, traduccion: traduccion};

                                                   
break;
case 49:
 this.$ = new Nodo("INSTRUC", "INSTRUC");
                                                     this.$.agregarHijo($$[$0-1].nodo);

                                                     traduccion = $$[$0-1].traduccion;
                                                                 
                                                     if ($$[$0]) {
                                                        this.$.agregarHijo($$[$0].nodo);
                                                        traduccion += $$[$0].traduccion;
                                                                    
                                                     }
                                                     this.$ = {nodo: this.$, traduccion: traduccion};

                                                   
break;
case 50: case 51: case 52: case 53: case 54:
 this.$ = new Nodo("INSTRUC", "INSTRUC");
                                                     this.$.agregarHijo($$[$0-1].nodo);

                                                     traduccion = $$[$0-1].traduccion;
                                                                 
                                                     if ($$[$0]) {
                                                        this.$.agregarHijo($$[$0].nodo);
                                                        traduccion += $$[$0].traduccion;
                                                                    
                                                     }
                                                     this.$ = {nodo: this.$, traduccion: traduccion};
                                                   
break;
case 55:
 this.$ = new Nodo("INSTRUC", "INSTRUC");
                                                            this.$.agregarHijo($$[$0-2].nodo);

                                                            traduccion = $$[$0-2].traduccion + ";";
                                                                 
                                                            if ($$[$0]) {
                                                                this.$.agregarHijo($$[$0].nodo);
                                                                traduccion += $$[$0].traduccion;
                                                                    
                                                            }

                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 56:
   this.$ = new Nodo("break", $$[$0-1]); 

                                            traduccion = `break;\n`;
                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                        
break;
case 57:
   this.$ = new Nodo("continue", $$[$0-1]); 

                                            traduccion = `continue;\n`;
                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                        
break;
case 59:

                            this.$ = new Nodo("INSTRUCC","INSTRUCC");

                            traduccion = `\n${$$[$0-1]}\n`;
                            if ($$[$0]) {
                                this.$.agregarHijo($$[$0].nodo);
                                traduccion += `${$$[$0].traduccion}`;
                            }
                            this.$ = {nodo: this.$, traduccion: traduccion};

                        
break;
case 61:
 this.$ = new Nodo("DECLA_VARIABLES", "DECLA_VARIABLES");
                                                                         this.$.agregarHijo(new Nodo("TIPO DATO", $$[$0-2]));
                                                                         this.$.agregarHijo($$[$0-1].nodo);

                                                                         traduccion = `var ${$$[$0-1].traduccion}; \n`;
                                                                         this.$ = {nodo: this.$, traduccion: traduccion};
                                                                         
                                                                        
break;
case 62:

                                                                           console.log("ERROR SINTACTICO 3-> LINEA: " + this._$.first_line);
                                                                           this.$ = {nodo: new Nodo("",""), traduccion: ""}; 
                                                                           listaErrores.push(new Token("ERROR SINTACTICO", yytext, this._$.first_line, this._$.first_column )); 
                                                                        
break;
case 63:
 this.$ = new Nodo("DECLA_VARIABLES", "DECLA_VARIABLES");
                                                                                    this.$.agregarHijo($$[$0-2].nodo);
                                                                                    this.$.agregarHijo($$[$0].nodo);

                                                                                    traduccion = "";
                                                                                    if ($$[$0-2]) {
                                                                                        traduccion += $$[$0-2].traduccion;
                                                                                    }
                                                                                    traduccion += ","
                                                                                    if($$[$0]){
                                                                                        traduccion += $$[$0].traduccion;
                                                                                    }
                                                                                    this.$ = {nodo: this.$, traduccion: traduccion};
                                                                                  
break;
case 64:
 this.$ = $$[$0].nodo;

                                                    this.$ = {nodo: this.$, traduccion: $$[$0].traduccion}
                                                  
break;
case 65:
 this.$ = new Nodo("DECLA_VARIABLES", "DECLA_VARIABLES"); 
                                                                this.$.agregarHijo(new Nodo("ID", $$[$0-2]));
                                                                this.$.agregarHijo($$[$0].nodo);

                                                                traduccion = `${$$[$0-2]} = ${$$[$0].traduccion}`
                                                                this.$ = {nodo: this.$, traduccion: traduccion};
                                                                
                                                              
break;
case 66:
 this.$ = new Nodo("ID", $$[$0]);
                                             
                                             traduccion = `${$$[$0]}`;
                                             this.$ = {nodo: this.$, traduccion: traduccion};
                                           
break;
case 67:
 this.$ = new Nodo("ASIGNACION", "ASIGNACION");
                                                                this.$.agregarHijo(new Nodo("ID", $$[$0-3]));
                                                                this.$.agregarHijo(new Nodo("IGUAL", $$[$0-2]));
                                                                this.$.agregarHijo($$[$0-1].nodo);

                                                                traduccion = `${$$[$0-3]} = ${$$[$0-1].traduccion};\n`;
                                                                this.$ = {nodo: this.$, traduccion: traduccion};
                                                              
break;
case 68:
 this.$ = new Nodo("INCREMENTO", "INCREMENTO");
                                                                this.$.agregarHijo(new Nodo("ID", $$[$0-2]));
                                                                this.$.agregarHijo(new Nodo("INCREMENTO", $$[$0-1]));

                                                                traduccion = `${$$[$0-2]}++;\n`;
                                                                this.$ = {nodo: this.$, traduccion: traduccion};
                                                              
break;
case 69:
 this.$ = new Nodo("DECREMENTO", "DECREMENTO");
                                                                this.$.agregarHijo(new Nodo("ID", $$[$0-2]));
                                                                this.$.agregarHijo(new Nodo("DECREMENTO", $$[$0-1]));

                                                                traduccion = `${$$[$0-2]}--;\n`;
                                                                this.$ = {nodo: this.$, traduccion: traduccion};
                                                              
break;
case 70:
   this.$ = new Nodo("IMPRIMIR", "IMPRIMIR");
            this.$.agregarHijo(new Nodo("PRINT",$$[$0-4]));
            this.$.agregarHijo($$[$0-2].nodo);

            traduccion = `console.log(${$$[$0-2].traduccion});\n`;
            this.$ = {nodo: this.$, traduccion: traduccion};

        
break;
case 71:
 this.$ = new Nodo("RETURN", "RETURN");
                                            this.$.agregarHijo(new Nodo("RETURN", $$[$0-2]));
                                            this.$.agregarHijo($$[$0-1].nodo);

                                            traduccion = `return ${$$[$0-1].traduccion};\n`;
                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                          
break;
case 72:
 this.$ = new Nodo("RETURN", "RETURN");
                                            this.$.agregarHijo(new Nodo("RETURN", $$[$0-1]));

                                            traduccion = `return;\n`;
                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                          
break;
case 73:

        this.$ = new Nodo("IF", "IF");
        this.$.agregarHijo(new Nodo("if", $$[$0-7]));
        this.$.agregarHijo($$[$0-5].nodo);

        traduccion = `if (${$$[$0-5].traduccion}) {\n`;
        if($$[$0-2]){
            $$[$0-2].traduccion.split("\n").forEach(linea => {
                if (linea != ""){
                    traduccion += `   ${linea}\n`;
                }
            });
        }
        traduccion += `} `;
        if($$[$0]){
            traduccion += $$[$0].traduccion;
        }
        this.$ = {nodo: this.$, traduccion: traduccion};

    
break;
case 74:
 this.$ = new Nodo("ELSE", "ELSE");
                        this.$.agregarHijo(new Nodo("else", $$[$0-1]));
                        this.$.agregarHijo($$[$0].nodo);

                        traduccion = `${$$[$0-1]} ${$$[$0].traduccion}`;
                        this.$ = {nodo: this.$, traduccion: traduccion};
                      
break;
case 76:
 this.$ = $$[$0].nodo;
            
              traduccion = $$[$0].traduccion;
              this.$ = {nodo: this.$, traduccion: traduccion};
            
break;
case 77:
 this.$ = $$[$0-1].nodo;
                                                   
                                                   traduccion = `{\n`;
                                                   if($$[$0-1]) {
                                                       $$[$0-1].traduccion.split("\n").forEach(linea => {
                                                            if (linea != ""){
                                                                traduccion += `   ${linea}\n`;
                                                            }
                                                        });
                                                   }
                                                   traduccion += `}`;
                                                   this.$ = {nodo: this.$, traduccion: traduccion};
                                                 
break;
case 78:

        this.$ = new Nodo("FOR", "FOR");
        this.$.agregarHijo(new Nodo("for", $$[$0-10]));
        this.$.agregarHijo($$[$0-8].nodo);
        this.$.agregarHijo($$[$0-7].nodo);
        this.$.agregarHijo(new Nodo(";", $$[$0-6]));
        this.$.agregarHijo(new Nodo("ID", $$[$0-5]));
        this.$.agregarHijo($$[$0-4].nodo);
        this.$.agregarHijo($$[$0-1].nodo);

        traduccion =  `for (${$$[$0-8].traduccion.replace("\n","")}${$$[$0-7].traduccion}; ${$$[$0-5]}${$$[$0-4].traduccion}) {\n`;
        if($$[$0-1]) {
            $$[$0-1].traduccion.split("\n").forEach(linea => {
                if (linea != ""){
                    traduccion += `   ${linea}\n`;
                }
            });
        }
        traduccion += `}\n`;
        this.$ = {nodo: this.$, traduccion: traduccion};

    
break;
case 79:

        this.$ = new Nodo("WHILE", "WHILE");
        this.$.agregarHijo(new Nodo("while", $$[$0-6]));
        this.$.agregarHijo($$[$0-4].nodo);
        this.$.agregarHijo($$[$0-1].nodo);

        traduccion = `while (${$$[$0-4].traduccion}) {\n`;
        if($$[$0-1]) {
            $$[$0-1].traduccion.split("\n").forEach(linea => {
                if (linea != ""){
                    traduccion += `   ${linea}\n`;
                }
            });
        }
        traduccion += `}\n`;
        this.$ = {nodo: this.$, traduccion: traduccion};
    
break;
case 80:

        this.$ = new Nodo("DO", "DO");
        this.$.agregarHijo(new Nodo("do", $$[$0-8]));
        this.$.agregarHijo($$[$0-6].nodo);
        this.$.agregarHijo(new Nodo("while", $$[$0-4]));
        this.$.agregarHijo($$[$0-2].nodo);

        traduccion = `do {\n`;
        if($$[$0-6]) {
            $$[$0-6].traduccion.split("\n").forEach(linea => {
                if (linea != ""){
                    traduccion += `   ${linea}\n`;
                }
            });
        }
        traduccion += `} while (${$$[$0-2].traduccion});\n`;
        this.$ = {nodo: this.$, traduccion: traduccion};
    
break;
case 81:
 this.$ = new Nodo("INCREMENTO", "INCREMENTO"); 
                            this.$.agregarHijo(new Nodo("incremento", $$[$0]));

                            traduccion = $$[$0];
                            this.$ = {nodo: this.$, traduccion: traduccion};
                          
break;
case 82:
 this.$ = new Nodo("DECREMENTO", "DECREMENTO"); 
                            this.$.agregarHijo(new Nodo("decremento", $$[$0]));

                            traduccion = $$[$0];
                            this.$ = {nodo: this.$, traduccion: traduccion};
                          
break;
case 83:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo(new Nodo("NOT", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `!${$$[$0-1].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};

                                                          
break;
case 84:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo(new Nodo("MENOS", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `-${$$[$0-1].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 85:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("MAS", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} + ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 86:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("MENOS", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} - ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 87:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("MULTIPLICACION", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} * ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 88:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("DIVISION", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} / ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 89:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("XOR", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} ^ ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 90:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("AND", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} && ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 91:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("OR", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} || ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 92:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("DOBLE IGUAL", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} == ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 93:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("DIFERENTE DE", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} != ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 94:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("MENOR O IGUAL", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} <= ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 95:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("MAYOR O IGUAL", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} >= ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 96:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("MENOR", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} < ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 97:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-2].nodo);
                                                            this.$.agregarHijo(new Nodo("MAYOR", $$[$0-1]));
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            traduccion = `${$$[$0-2].traduccion} > ${$$[$0].traduccion}`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion};
                                                          
break;
case 98:
 this.$ = {nodo: new Nodo("NUMERO", $$[$0]), traduccion: $$[$0]}; 
break;
case 99:
 this.$ = {nodo: new Nodo("TRUE", $$[$0]), traduccion: $$[$0]}; 
break;
case 100:
 this.$ = {nodo: new Nodo("FALSE", $$[$0]), traduccion: $$[$0]}; 
break;
case 101:
 this.$ = {nodo: new Nodo("CADENA", $$[$0]), traduccion: $$[$0]}; 
break;
case 102:
 this.$ = {nodo: new Nodo("CARACTER", $$[$0]), traduccion: $$[$0]}; 
break;
case 103:
 this.$ = {nodo: new Nodo("IDENTIFICADOR", $$[$0]), traduccion: $$[$0]}; 
break;
case 104:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0].nodo);

                                                            this.$ = {nodo: this.$, traduccion: $$[$0].traduccion};
                                                          
break;
case 105:
 this.$ = new Nodo("E", "E");
                                                            this.$.agregarHijo($$[$0-1].nodo);

                                                            traduccion = `(${$$[$0-1].traduccion})`;
                                                            this.$ = {nodo: this.$, traduccion: traduccion}; 
                                                          
break;
case 106:
 this.$ = new Nodo("LLAMAR_FUNCION", "LLAMAR_FUNCION");
                                                                                         this.$.agregarHijo(new Nodo("ID",$$[$0-3]));

                                                                                         traduccion = `${$$[$0-3]}(`;
                                                                                         if($$[$0-1]){
                                                                                            this.$.agregarHijo($$[$0-1].nodo);
                                                                                             traduccion += $$[$0-1].traduccion;
                                                                                         } 
                                                                                         traduccion  += `)`;
                                                                                         this.$ = {nodo: this.$, traduccion: traduccion};
                                                                                         
                                                                                       
break;
case 107:
 this.$ = new Nodo("L_EXPRESIONES", "L_EXPRESIONES");
                                                    this.$.agregarHijo($$[$0-1].nodo);

                                                    traduccion = $$[$0-1].traduccion;
                                                    if ($$[$0]){
                                                        this.$.agregarHijo($$[$0].nodo);
                                                        traduccion += $$[$0].traduccion;
                                                    }
                                                    this.$ = {nodo: this.$, traduccion: traduccion};
                                                  
break;
case 109:
 
                                                                this.$ = new Nodo("L_EXPRESIONES", "L_EXPRESIONES");
                                                                this.$.agregarHijo($$[$0-1].nodo);

                                                                traduccion = `,${$$[$0-1].traduccion}`;
                                                                if ($$[$0]) {
                                                                    this.$.agregarHijo($$[$0].nodo);
                                                                    traduccion += $$[$0].traduccion;
                                                                }
                                                                this.$ = {nodo: this.$, traduccion: traduccion};
                                                           
break;
}
},
table: [{3:1,4:2,5:[2,5],6:3,8:[1,4],9:[1,5],10:$V0},{1:[3]},{5:[1,7]},{5:$V1,6:9,7:8,8:$V2,9:$V3,10:$V0},{5:$V1,6:9,7:12,8:$V2,9:$V3,10:$V0},{5:$V1,6:9,7:13,8:$V2,9:$V3,10:$V0},{2:[1,17],11:14,12:[1,15],17:[1,16]},{1:[2,1]},{5:[2,2]},{5:$V1,6:9,7:18,8:$V2,9:$V3,10:$V0},{5:$V1,6:9,7:19,8:$V2,9:$V3,10:$V0},{5:$V1,6:9,7:20,8:$V2,9:$V3,10:$V0},{5:[2,3]},{5:[2,4]},o($V4,[2,10]),{13:[1,21]},{13:[1,22]},{16:[1,23]},{5:[2,6]},{5:[2,7]},{5:[2,8]},{14:[1,24]},{14:[1,25]},o($V4,[2,13]),{2:$V5,8:$V6,9:$V7,10:$V8,15:26,16:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,36:27,37:28},{8:[1,41],9:[1,42],10:$Vf,16:[2,17],18:39,19:40},{16:[1,44]},{2:$V5,8:$V6,9:$V7,10:$V8,15:45,16:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,36:27,37:28},{2:$V5,8:$V6,9:$V7,10:$V8,15:46,16:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,36:27,37:28},{2:$V5,8:$V6,9:$V7,10:$V8,15:47,16:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,36:27,37:28},{2:$V5,8:$V6,9:$V7,10:$V8,15:48,16:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,36:27,37:28},{2:[1,52],21:51,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,38:49,39:[1,50]},{13:$Vm,54:59,55:60},{16:[1,62]},{13:[2,34]},{13:[2,35]},{13:[2,36]},{13:[2,37]},{13:[2,38]},{16:[1,63]},{8:$Vn,9:$Vo,10:$Vf,16:$Vp,19:65,20:64},{8:$Vn,9:$Vo,10:$Vf,16:$Vp,19:65,20:68},{8:$Vn,9:$Vo,10:$Vf,16:$Vp,19:65,20:69},{21:70,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl},o($V4,[2,11]),{16:[2,39]},{16:[2,40]},{16:[2,41]},{16:[2,42]},o($Vq,[2,44]),{31:[1,71]},{13:[1,72]},{16:[1,73]},{13:[2,23]},{13:[2,24]},{13:[2,25]},{13:[2,26]},{13:[2,27]},{13:[2,28]},{25:[1,74],34:[1,75]},o($Vr,[2,64]),o($Vr,[2,66],{56:[1,76]}),o($Vs,[2,62]),o($V4,[2,12]),{16:[2,14]},{8:$Vn,9:$Vo,10:$Vf,16:$Vp,19:65,20:77},{8:$Vn,9:$Vo,10:$Vf,16:$Vp,19:65,20:78},{8:$Vn,9:$Vo,10:$Vf,16:$Vp,19:65,20:79},{16:[2,15]},{16:[2,16]},{13:[1,80]},{40:[1,81]},{22:[1,82]},o($Vq,[2,47]),o($Vs,[2,61]),{13:$Vm,55:83},{13:$Vt,22:$Vu,50:93,57:84,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{16:[2,18]},{16:[2,19]},{16:[2,20]},{22:[1,95]},{22:[1,96]},{23:97,24:$VC,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,32:98,35:99},o($Vr,[2,63]),o($Vr,[2,65],{71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP}),{13:$Vt,22:$Vu,50:93,57:113,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:114,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($VQ,[2,98]),o($VQ,[2,99]),o($VQ,[2,100]),o($VQ,[2,101]),o($VQ,[2,102]),o($VQ,[2,103],{22:$VR}),o($VQ,[2,104]),{13:$Vt,22:$Vu,50:93,57:116,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{23:117,24:$VC,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,32:98,35:99},{26:[1,118]},{24:[1,119]},{24:$VS,33:120,34:$VT},{13:[1,122]},{13:$Vt,22:$Vu,50:93,57:123,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:124,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:125,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:126,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:127,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:128,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:129,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:130,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:131,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:132,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:133,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:134,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:135,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($VQ,[2,83]),o($VQ,[2,84]),{13:$Vt,22:$Vu,24:[2,108],50:93,57:137,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:136},{24:[1,138],71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP},{24:[1,139]},{41:[1,140]},{14:[1,141]},{24:[2,29]},{26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,32:142,35:99},o([24,34],[2,33]),o($VU,[2,85],{73:$VF,74:$VG}),o($VU,[2,86],{73:$VF,74:$VG}),o($VQ,[2,87]),o($VQ,[2,88]),o($VV,[2,89],{71:$VD,72:$VE,73:$VF,74:$VG,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP}),o($VV,[2,90],{71:$VD,72:$VE,73:$VF,74:$VG,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP}),o($VV,[2,91],{71:$VD,72:$VE,73:$VF,74:$VG,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP}),o($VW,[2,92],{71:$VD,72:$VE,73:$VF,74:$VG,80:$VM,81:$VN,82:$VO,83:$VP}),o($VW,[2,93],{71:$VD,72:$VE,73:$VF,74:$VG,80:$VM,81:$VN,82:$VO,83:$VP}),o($VX,[2,94],{71:$VD,72:$VE,73:$VF,74:$VG}),o($VX,[2,95],{71:$VD,72:$VE,73:$VF,74:$VG}),o($VX,[2,96],{71:$VD,72:$VE,73:$VF,74:$VG}),o($VX,[2,97],{71:$VD,72:$VE,73:$VF,74:$VG}),{24:[1,143]},{24:$VY,34:$VZ,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP,90:144},o($VQ,[2,105]),{25:[1,146]},{42:[1,147]},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:148,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{24:$VS,33:168,34:$VT},o($VQ,[2,106]),{24:[2,107]},{13:$Vt,22:$Vu,50:93,57:169,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o([8,9,10,16],[2,22]),{13:[1,170]},{16:[1,171]},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:172,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:173,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:174,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:175,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:176,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:177,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:178,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{25:[1,179]},{25:[1,180]},{25:[1,181]},{16:[2,58]},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:182,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{22:[1,183]},{22:[1,184]},{22:[1,185]},{14:[1,186]},{22:[1,187]},{22:$VR,56:[1,188],58:[1,189],59:[1,190]},{13:$Vt,22:$Vu,25:[1,192],50:93,57:191,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{24:[2,31]},{24:$VY,34:$VZ,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP,90:193},{24:[1,194]},o($Vq,[2,46]),{16:[2,48]},{16:[2,49]},{16:[2,50]},{16:[2,51]},{16:[2,52]},{16:[2,53]},{16:[2,54]},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:195,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{16:[2,56]},{16:[2,57]},{16:[2,59]},{13:$Vt,22:$Vu,50:93,57:196,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{2:$V5,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:197},{13:$Vt,22:$Vu,50:93,57:198,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:199,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{13:$Vt,22:$Vu,50:93,57:200,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{13:$Vt,22:$Vu,50:93,57:201,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{25:[1,202]},{25:[1,203]},{25:[1,204],71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP},{16:[2,72]},{24:[2,109]},{14:[1,205]},{16:[2,55]},{24:[1,206],71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP},{13:$Vt,22:$Vu,50:93,57:207,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{24:[1,208],71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP},{16:[1,209]},{24:[1,210],71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP},{25:[1,211],71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP},o($V91,[2,68]),o($V91,[2,69]),{16:[2,71]},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:212,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{14:[1,213]},{25:[1,214],71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP},{14:[1,215]},{68:[1,216]},{25:[1,217]},o($V91,[2,67]),{16:[1,218]},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:219,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{13:[1,220]},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:221,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{22:[1,222]},o($V91,[2,70]),o($Vq,[2,45]),{16:[1,223]},{58:[1,225],59:[1,226],67:224},{16:[1,227]},{13:$Vt,22:$Vu,50:93,57:228,70:$Vv,71:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($V91,[2,75],{63:229,64:[1,230]}),{24:[1,231]},{24:[2,81]},{24:[2,82]},o($V91,[2,79]),{24:[1,232],71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,83:$VP},o($V91,[2,73]),{14:[1,235],44:234,62:$V51,65:233},{14:[1,236]},{25:[1,237]},o($V91,[2,74]),o($V91,[2,76]),{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:238,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},{2:$V5,8:$V_,13:$V$,16:$V01,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,35:32,37:149,43:239,44:150,45:151,46:152,47:153,48:154,49:155,50:156,51:$V11,52:$V21,53:159,60:$V31,61:$V41,62:$V51,66:$V61,68:$V71,69:$V81},o($V91,[2,80]),{16:[1,240]},{16:[1,241]},o($V91,[2,77]),o($V91,[2,78])],
defaultActions: {7:[2,1],8:[2,2],12:[2,3],13:[2,4],18:[2,6],19:[2,7],20:[2,8],34:[2,34],35:[2,35],36:[2,36],37:[2,37],38:[2,38],45:[2,39],46:[2,40],47:[2,41],48:[2,42],53:[2,23],54:[2,24],55:[2,25],56:[2,26],57:[2,27],58:[2,28],64:[2,14],68:[2,15],69:[2,16],77:[2,18],78:[2,19],79:[2,20],120:[2,29],144:[2,107],159:[2,58],168:[2,31],172:[2,48],173:[2,49],174:[2,50],175:[2,51],176:[2,52],177:[2,53],178:[2,54],180:[2,56],181:[2,57],182:[2,59],192:[2,72],193:[2,109],195:[2,55],204:[2,71],225:[2,81],226:[2,82]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Token = require('./token');
    const Nodo = require('./Nodo');
    let listaTokens = [];
    let listaErrores = [];
    let traduccion = "";
    let ident = "";  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2: listaTokens.push(new Token("Comentario", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_comentario";
break;
case 3: listaTokens.push(new Token("Comentario Multilinea", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_multi_coment";
break;
case 4: listaTokens.push(new Token("Tipo_Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_int";
break;
case 5: listaTokens.push(new Token("Tipo_Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_char";
break;
case 6: listaTokens.push(new Token("Tipo_Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_string";
break;
case 7: listaTokens.push(new Token("Tipo_Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_double";
break;
case 8: listaTokens.push(new Token("Tipo_Dato", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_boolean";
break;
case 9: listaTokens.push(new Token("Punto_Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_punto_coma";
break;
case 10: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 11: listaTokens.push(new Token("Dos_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_dos_puntos";
break;
case 12: listaTokens.push(new Token("Incremento", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_incremento";
break;
case 13: listaTokens.push(new Token("Decremento", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_decremento";
break;
case 14: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_mayor_igual";
break;
case 15: listaTokens.push(new Token("Menor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_menor_igual";
break;
case 16: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_mayor";
break;
case 17: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_menor";
break;
case 18: listaTokens.push(new Token("Diferente_De", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_diferente_de";
break;
case 19: listaTokens.push(new Token("Doble_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_doble_igual";
break;
case 20: listaTokens.push(new Token("Not", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_not";
break;
case 21: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_igual";
break;
case 22: listaTokens.push(new Token("Or", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_and";
break;
case 23: listaTokens.push(new Token("And", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_or";
break;
case 24: listaTokens.push(new Token("Mas", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_mas";
break;
case 25: listaTokens.push(new Token("Menos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_menos";
break;
case 26: listaTokens.push(new Token("Multiplicacion", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_multiplicacion";
break;
case 27: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_division";
break;
case 28: listaTokens.push(new Token("Xor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_xor";
break;
case 29: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_parentesis_izq";
break;
case 30: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_parentesis_der";
break;
case 31: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 32: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 33: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 34: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_public";
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_class";
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_interface";
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_void";
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_true";
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_false";
break;
case 41: listaTokens.push(new Token("Imprimir", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_imprimir";
break;
case 42: listaTokens.push(new Token("Imprimir", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_imprimir";
break;
case 43: listaTokens.push(new Token("Imprimir", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_imprimir";
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_break";
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_continue";
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_return";
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_static";
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_main";
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_for";
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_while";
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_do";
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_if";
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_else";
break;
case 54: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_cadena";
break;
case 55: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 56: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 57: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 58: return "EOF"; 
break;
case 59: listaErrores.push(new Token("ERROR LEXICO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:!)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:System\.out\.printf\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}